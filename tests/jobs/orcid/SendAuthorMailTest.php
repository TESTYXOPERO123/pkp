<?php

/**
 * @file tests/jobs/orcid/SendAuthorMailTest.php
 *
 * Copyright (c) 2014-2024 Simon Fraser University
 * Copyright (c) 2000-2024 John Willinsky
 * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.
 *
 * @brief Tests for the author ORCID verification email job.
 */

namespace PKP\tests\jobs\orcid;

use APP\publication\Publication;
use APP\publication\Repository as PublicationRepository;
use APP\submission\Repository as SubmissionRepository;
use APP\submission\Submission;
use Illuminate\Support\Facades\Mail;
use Mockery;
use PKP\citation\CitationDAO;
use PKP\db\DAORegistry;
use PKP\jobs\orcid\SendAuthorMail;
use PKP\services\PKPSchemaService;
use PKP\site\Site;
use PKP\site\SiteDAO;
use PKP\submission\SubmissionAgencyDAO;
use PKP\submission\SubmissionDisciplineDAO;
use PKP\submission\SubmissionKeywordDAO;
use PKP\submission\SubmissionSubjectDAO;
use PKP\tests\PKPTestCase;

class SendAuthorMailTest extends PKPTestCase
{

    /**
     * base64_encoded serialization from OJS 3.5.0
     */
    protected string $serializedJobData = "";

    public function getMockedDAOs(): array
    {
         return [...parent::getMockedDAOs(), 'SiteDAO'];
    }

    /**
     * Test job is a proper instance
     */
    public function testUnserializeGetProperJobInstance(): void
    {
        $this->assertInstanceOf(
            SendAuthorMail::class,
            unserialize(base64_decode($this->serializedJobData)),
        );
    }


    public function testRunSerializedJob(): void
    {
        $this->mockRequest();
        $this->mockMail();
        Mail::shouldReceive('send')
            ->withAnyArgs();

        /** @var SendAuthorMail $sendAuthorMailJob */
        $sendAuthorMailJob = unserialize(base64_decode($this->serializedJobData));

        // Publication mocks
        $publicationMock = Mockery::mock(Publication::class)
            ->makePartial()
            ->shouldReceive('getData')
            ->with('submissionId')
            ->andReturn(1)
            ->getMock();

        $publicationDaoMock = Mockery::mock(\APP\publication\DAO::class, [
            new SubmissionKeywordDAO(),
            new SubmissionSubjectDAO(),
            new SubmissionDisciplineDAO(),
            new SubmissionAgencyDAO(),
            new CitationDAO(),
            new PKPSchemaService(),
        ])
            ->makePartial()
            ->shouldReceive([
                'fromRow' => $publicationMock,
            ])
            ->withAnyArgs()
            ->getMock();

        $publicationRepoMock = Mockery::mock(app(PublicationRepository::class))
            ->makePartial()
            ->shouldReceive('get')
            ->withAnyArgs()
            ->andReturn($publicationMock)
            ->set('dao', $publicationDaoMock)
            ->getMock();

        app()->instance(PublicationRepository::class, $publicationRepoMock);

        // Submission mocks
        $submissionMock = Mockery::mock(Submission::class)
            ->makePartial()
            ->shouldReceive([
                'getCurrentPublication' => $publicationMock,
            ])
            ->getMock();

        $submissionDaoMock = Mockery::mock(\APP\submission\DAO::class, [
            new PKPSchemaService()
        ])
            ->makePartial()
            ->shouldReceive([
                'fromRow' => $submissionMock,
            ])
            ->withAnyArgs()
            ->getMock();

       $submissionRepoMock = Mockery::mock(app(SubmissionRepository::class))
           ->makePartial()
           ->shouldReceive('get')
           ->withAnyArgs()
           ->andReturn($submissionMock)
           ->set('dao', $submissionDaoMock)
           ->getMock();

        app()->instance(SubmissionRepository::class, $submissionRepoMock);

        $siteMock = Mockery::mock(Site::class)
            ->makePartial()
            ->shouldReceive('getData')
            ->with('orcidEnabled')
            ->andReturn(false)
            ->getMOck();

        $siteDaoMock = Mockery::mock(SiteDAO::class)
            ->makePartial()
            ->shouldReceive([
                'fromRow' => $siteMock,
            ])
           ->withAnyArgs()
           ->getMock();

        DAORegistry::registerDAO('SiteDAO', $siteDaoMock);

        $this->assertNull($sendAuthorMailJob->handle());
    }
}
